:::Project outline:::
 
==>Input: Language
 
==>Output: Name

 
==>Functions:
    >Main()
    
    
        >GetLang()
        
            -Uses files.dir.files() to read files in language directory
            -Prompts users with the list to chose one
                1 English
                2 Spanish
                ...
            -Returns an array of all the names in that language directory
            
            
        >PatternSort()
        
            >FindPattern(n,array nLetters,&arraysize) where n = 1-3
                -Concurrently runs through each word n leters at a time
                -Talies the popularity and position of the letter combinations
                -Stores the data in a 2d array
                    .array nLetters[][5]
                        {{ char Pattern , int lengthOfOriginalWord , int PrefixOccurences , int MidOccurences , int SuffixOccurences }}
                    
                    
        >MakeName()
            >Determine size of new name
            >Determine a combination of pattern sizes
            >Determine order of patterns
            >Determine pattern location priority
            >Determine pattern origin length priority
            >Determine pattern popularity priority
            >Choose sudo random patterns and add together
            >return name
 
==>Data Flow:
    (Function A) | [passed value] -> (Function B) | [return value]
   
    User [language choice] -> Main() [name]
    Main() [language choice] -> GetLang() [language file]
    Main() [language file] -> PatternSort() [pattern set]
    Main() [pattern set] -> MakeName() [name]
 
==>Properties of a name:
    Prefix   Mid   Suffix
    [A] B [C D] E [F G H]
 
==>Data Structure:
    >Type -> 2d arrray
    >Type of contents -> Int & String
 
    Pattern | Length of origin word | Occurences as Prefix | Occurences as Mid | Occurences as Suffix |
     "ale"             10                       2                    3                     4
 
